name: CI

on:
  push:
  pull_request:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-php:
    name: Prepare PHP
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [8.0.22]
    steps:
      - name: Build and prepare PHP cache
        uses: pmmp/setup-php-action@bc85364420d16fcf4986985fa67c9dd80c0b010b
        with:
          php-version: ${{ matrix.php }}
          install-path: "../bin"

  typo:
    name: Typo Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: typos-action
        # You may pin to the exact commit or the version.
        # uses: crate-ci/typos@592b36d23c62cb378f6097a292bc902ee73f93ef
        uses: crate-ci/typos@v1.0.4
#         with:
          # Files or patterns to check
#           files: # optional
          # Comma separated list of extend identifiers, like someone's name
#           extend_identifiers: # optional
          # Comma separated list of extend words.
#           extend_words: # optional
          # Ignore implicit configuration files
#           isolated: # optional
          # Use a custom config file.
          #           config: # optional

  phar:
    name: Build PHAR
    permissions:
      contents: write
    needs: [build-php]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [8.0.22]
    steps:
      - uses: actions/checkout@v3
      - name: Complete plugin manifest with release tag
        if: github.event_name == 'release'
        run: |
          echo "version: ${{ github.ref }}" >> plugin.yml
      - name: Complete plugin manifest with commit SHA
        if: github.event_name != 'release'
        run: |
          echo "version: ${{ github.sha }}" >> plugin.yml
      - name: PSR-420
        run: |
          mkdir "${{ github.repository_owner }}"
          mv src "${{ github.repository }}"
          mkdir src
          mv "${{ github.repository_owner }}" src
      - uses: pmmp/setup-php-action@bc85364420d16fcf4986985fa67c9dd80c0b010b
        with:
          php-version: ${{ matrix.php }}
          install-path: "../bin"
      - name: Install Composer
        run: curl -sS https://getcomposer.org/installer | php
      - run: composer install
      - run: composer all
      - name: Rename artifact
        run: mv hack/output.phar hack/${{ github.event.repository.name }}.phar
      - uses: actions/upload-artifact@v3
        if: github.event_name != 'release'
        with:
          name: ${{ github.event.repository.name }}
          path: hack/${{ github.event.repository.name }}.phar
          retention-days: 1 # default 90.
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  sftp:
    name: Sync PHAR to a private server
    needs: [phar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: ${{ github.workspace }}
      - uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
            username: ${{ secrets.FTP_USERNAME }}
            server: ${{ secrets.FTP_SERVER }}
            port: ${{ secrets.FTP_PORT }}
            local_path: '~/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}.phar'
            remote_path: 'plugins/${{ github.event.repository.name }}.phar'
            sftp_only: true
            password: ${{ secrets.FTP_PASSWORD }}
            delete_remote_files: 1
      - if: failure()
        run: |
          tree ~/work/${{ github.event.repository.name }}
          stat ~/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}.phar

  test:
    name: Integrated test with Docker
    needs: [phar]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pm: [4, 4.0.0]
        container-prefix: [form-interaction-fix]
    steps:
      - name: Checkout for IntegratedTest.php
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: /home/runner/plugins
      - name: Docker create and run
        run: >
          docker rm ${{ matrix.container-prefix}}-pocketmine || true;
          docker create --name ${{ matrix.container-prefix}}-pocketmine
          -u root
          pmmp/pocketmine-mp:${{ matrix.pm }}
          start-pocketmine --debug.level=2 --auto-report.enabled=0;

          wget -O /home/runner/plugins/FakePlayer.phar https://poggit.pmmp.io/r/146802;
          docker cp /home/runner/plugins/ ${{ matrix.container-prefix }}-pocketmine:/;
          docker cp IntegratedTest.php ${{ matrix.container-prefix }}-pocketmine:/plugins/IntegratedTest.php;

          sleep 30 && docker kill test &> /dev/null;
          docker start -ia ${{ matrix.container-prefix }}-pocketmine;
# https://discord.com/channels/373199722573201408/480650036972224513/1038057748170035260
